from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from create_bot import bot
from data_base.dao import add_note
from keyboards.reply_note_kb import main_note_kb, add_note_check
from keyboards.reply_other_kb import stop_fsm
from utils.utils import get_content_info, send_message_user

add_note_router = Router()


class AddNoteStates(StatesGroup):
    content = State()  # –û–∂–∏–¥–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    check_state = State()  # –§–∏–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞


@add_note_router.message(F.text == 'üìù –ó–∞–º–µ—Ç–∫–∏')
async def start_note(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–¢—ã –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                         reply_markup=main_note_kb())


@add_note_router.message(F.text == 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
async def start_add_note(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ –∏–ª–∏ –º–µ–¥–∏–∞ + —Ç–µ–∫—Å—Ç). '
                         '–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∫ –º–µ–¥–∏–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å - –æ—Å—Ç–∞–≤—å –µ–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—É ',
                         reply_markup=stop_fsm())
    await state.set_state(AddNoteStates.content)


@add_note_router.message(AddNoteStates.content)
async def handle_user_note_message(message: Message, state: FSMContext):
    content_info = get_content_info(message)
    if content_info.get('content_type'):
        await state.update_data(**content_info)

        text = (f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞:\n"
                f"–¢–∏–ø: {content_info['content_type']}\n"
                f"–ü–æ–¥–ø–∏—Å—å: {content_info['content_text'] if content_info['content_text'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"File ID: {content_info['file_id'] if content_info['file_id'] else '–ù–µ—Ç —Ñ–∞–π–ª–∞'}\n\n"
                f"–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?")
        await send_message_user(bot=bot, content_type=content_info['content_type'], content_text=text,
                                user_id=message.from_user.id, file_id=content_info['file_id'],
                                kb=add_note_check())
        await state.set_state(AddNoteStates.check_state)
    else:
        await message.answer(
            '–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫–∏–º –º–µ–¥–∞—Ñ–∞–π–ª–æ–º, –∫–∞–∫ —Ç—ã —Å–∫–∏–Ω—É–ª. –î–∞–≤–∞–π —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –æ–∫?'
        )
        await state.set_state(AddNoteStates.content)


@add_note_router.message(AddNoteStates.check_state, F.text == '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ')
async def confirm_add_note(message: Message, state: FSMContext):
    note = await state.get_data()
    await add_note(user_id=message.from_user.id, content_type=note.get('content_type'),
                   content_text=note.get('content_text'), file_id=note.get('file_id'))
    await message.answer('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_note_kb())
    await state.clear()


@add_note_router.message(AddNoteStates.check_state, F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def cancel_add_note(message: Message, state: FSMContext):
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=main_note_kb())
    await state.clear()
